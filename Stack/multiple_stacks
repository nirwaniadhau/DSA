/*WAP to implement multiple stack i.e. More than two stacks using array
and perform following operations on it. A. PUSH, B. POP, C. StackFull
D. StackeEmpty E. Display Stack.*/

#include <stdio.h>
#include <stdlib.h>

#define MAX 100       // Total size of the array
#define K 3           // Number of stacks

int arr[MAX];         // Shared array for all stacks
int top[K];           // Top of each stack
int size = MAX / K;   // Size of each stack

// Initialize top pointers
void init() {
    for (int i = 0; i < K; i++)
        top[i] = (i * size) - 1;
}

// Check if stack is full
int isFull(int sn) {
    return top[sn] == ((sn + 1) * size) - 1;
}

// Check if stack is empty
int isEmpty(int sn) {
    return top[sn] == (sn * size) - 1;
}

// PUSH operation
void push(int sn, int value) {
    if (sn < 0 || sn >= K) {
        printf("Invalid stack number!\n");
        return;
    }

    if (isFull(sn)) {
        printf("Stack %d is FULL.\n", sn);
        return;
    }
    top[sn]++;
    arr[top[sn]] = value;
    printf("Pushed %d to Stack %d.\n", value, sn);
}

// POP operation
void pop(int sn) {
    if (sn < 0 || sn >= K) {
        printf("Invalid stack number!\n");
        return;
    }

    if (isEmpty(sn)) {
        printf("Stack %d is EMPTY.\n", sn);
        return;
    }

    int popped = arr[top[sn]];
    top[sn]--;
    printf("Popped %d from Stack %d.\n", popped, sn);
}

// Display stack contents
void display(int sn) {
    if (sn < 0 || sn >= K) {
        printf("Invalid stack number!\n");
        return;
    }

    if (isEmpty(sn)) {
        printf("Stack %d is EMPTY.\n", sn);
        return;
    }

    printf("Stack %d: ", sn);
    for (int i = (sn * size); i <= top[sn]; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

int main() {
    int choice, sn, value;
    init();

    while (1) {
        printf("\n==== MULTIPLE STACK MENU ====\n");
        printf("1. PUSH\n");
        printf("2. POP\n");
        printf("3. Check Stack FULL\n");
        printf("4. Check Stack EMPTY\n");
        printf("5. DISPLAY STACK\n");
        printf("6. EXIT\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter stack number (0 to %d): ", K - 1);
                scanf("%d", &sn);
                printf("Enter value to push: ");
                scanf("%d", &value);
                push(sn, value);
                break;

            case 2:
                printf("Enter stack number (0 to %d): ", K - 1);
                scanf("%d", &sn);
                pop(sn);
                break;

            case 3:
                printf("Enter stack number (0 to %d): ", K - 1);
                scanf("%d", &sn);
                if (isFull(sn))
                    printf("Stack %d is FULL.\n", sn);
                else
                    printf("Stack %d is NOT full.\n", sn);
                break;

            case 4:
                printf("Enter stack number (0 to %d): ", K - 1);
                scanf("%d", &sn);
                if (isEmpty(sn))
                    printf("Stack %d is EMPTY.\n", sn);
                else
                    printf("Stack %d is NOT empty.\n", sn);
                break;

            case 5:
                printf("Enter stack number (0 to %d): ", K - 1);
                scanf("%d", &sn);
                display(sn);
                break;

            case 6:
                printf("Exiting program...\n");
                exit(0);

            default:
                printf("Invalid choice! Try again.\n");
        }
    }

    return 0;
}
